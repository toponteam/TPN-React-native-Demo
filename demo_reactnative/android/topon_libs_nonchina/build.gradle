apply plugin: 'com.android.library'

import com.android.annotations.NonNull
import com.android.manifmerger.ManifestMerger2
import com.android.manifmerger.ManifestMerger2.Invoker
import com.android.manifmerger.ManifestMerger2.MergeType
import com.android.manifmerger.MergingReport
import com.android.manifmerger.XmlDocument
import com.android.utils.ILogger
import com.google.common.base.Charsets
import com.google.common.io.Files

ArrayList<String> networkLibsPath = new ArrayList<>();

networkLibsPath.add("adcolony");
networkLibsPath.add("admob");
networkLibsPath.add("applovin");
networkLibsPath.add("appnext");
networkLibsPath.add("chartboost");
networkLibsPath.add("facebook");
networkLibsPath.add("inmobi");
networkLibsPath.add("ironsource");
networkLibsPath.add("maio");
networkLibsPath.add("mintegral");
networkLibsPath.add("mopub");
networkLibsPath.add("nend");
networkLibsPath.add("ogury");
networkLibsPath.add("startapp");
networkLibsPath.add("tapjoy");
networkLibsPath.add("unityads");
networkLibsPath.add("vungle");
networkLibsPath.add("pangle");
networkLibsPath.add("fyber");


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"


    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            res.srcDirs += 'network/adcolony/res'
            res.srcDirs += 'network/admob/res'
            res.srcDirs += 'network/applovin/res'
            res.srcDirs += 'network/appnext/res'
            res.srcDirs += 'network/chartboost/res'
            res.srcDirs += 'network/facebook/res'
            res.srcDirs += 'network/inmobi/res'
            res.srcDirs += 'network/ironsource/res'
            res.srcDirs += 'network/maio/res'
            res.srcDirs += 'network/mintegral/res'
            res.srcDirs += 'network/mopub/res'
            res.srcDirs += 'network/ogury/res'
            res.srcDirs += 'network/startapp/res'
            res.srcDirs += 'network/tapjoy/res'
            res.srcDirs += 'network/unityads/res'
            res.srcDirs += 'network/pangle/res'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.browser:browser:1.0.0'

    def batchImportPackage = {
        HashMap<String, Boolean> packageNameMap = new HashMap<>();
        for (String path : networkLibsPath) {
            fileTree(dir: 'network', include: [path + '/libs/*.aar', path + '/libs/*.jar']).each { File file ->
                def name = file.name.lastIndexOf('.').with {
                    it != -1 ? file.name[0..<it] : file.name
                }
                if (!packageNameMap.containsKey(name)) {
                    api files(file.getAbsolutePath())
                    packageNameMap.put(name, true)
                }

            }
            fileTree(dir: 'network', include: [path + '/extra/*.aar', path + '/extra/*.jar']).each { File file ->
                def name = file.name.lastIndexOf('.').with {
                    it != -1 ? file.name[0..<it] : file.name
                }
                if (!packageNameMap.containsKey(name)) {
                    api files(file.getAbsolutePath())
                    packageNameMap.put(name, true)
                }

            }
        }
    }
    batchImportPackage()
}



//合并所有network的manifest
task mergeAllNetworkManifest {
    doLast {
        List<File> libraryManifestList = new ArrayList<>()
        for (String pathName : networkLibsPath) {
            File manifestFile = new File(projectDir.absolutePath + '/network/' + pathName + '/AndroidManifest.xml')
            println('名称 --> ' + manifestFile.absolutePath)
            if (manifestFile.exists()) {
                libraryManifestList.add(manifestFile);
            }
        }

        //删除 AndroidManifest文件
        delete fileTree("src").matching {
            include "**/AndroidManifest.xml"
        }

        //创建 AndroidManifest文件
        copy {
            from projectDir.absolutePath + '/src/main/AndroidManifest_base.xml'
            into projectDir.absolutePath + '/src/main/'
            rename { String fileName ->
                fileName.replace('_base','')
            }
        }

        //合并所有network AndroidManifest文件 -->  src/main/AndroidManifest.xml
        mergeManifest(libraryManifestList, file(projectDir.absolutePath + "/src/main/AndroidManifest.xml"))

    }
}



//合并manifest
private void mergeManifest(List<File> libraryManifests, File originMaifestFile) {

    ILogger mLogger = new MiLogger()

//    embeddedAarDirs.each { aarPath ->
//        if (!libraryManifests.contains(aarPath)) {
//            libraryManifests.add(file("$aarPath/AndroidManifest.xml"))
//        }
//    }

    File reportFile = file(buildDir.absolutePath + "/embedManifestReport.txt")

    File aaptManifest = file(projectDir.absolutePath + "/src/main/AndroidManifest.xml")


    try {
        Invoker manifestMergerInvoker = ManifestMerger2.newMerger(originMaifestFile, mLogger, MergeType.APPLICATION)

        manifestMergerInvoker.addLibraryManifests(libraryManifests.toArray(new File[libraryManifests.size()]))

        // manifestMergerInvoker.setPlaceHolderValues(placeHolders)
        manifestMergerInvoker.setMergeReportFile(reportFile);

        MergingReport mergingReport = manifestMergerInvoker.merge();

        mLogger.info("Merging result:" + mergingReport.getResult());
        MergingReport.Result result = mergingReport.getResult();
        switch (result) {
            case MergingReport.Result.WARNING:
                mergingReport.log(mLogger);
        // fall through since these are just warnings.
            case MergingReport.Result.SUCCESS:
                XmlDocument xmlDocument = mergingReport.getMergedXmlDocument(MergingReport.MergedManifestKind.MERGED);
                try {
                    String annotatedDocument = mergingReport.getActions().blame(xmlDocument);
                    mLogger.verbose(annotatedDocument);
                } catch (Exception e) {
                    mLogger.error(e, "cannot print resulting xml");
                }
//                save(xmlDocument, origManifest);
//                mLogger.info("Merged manifest saved to " + origManifest);
                if (aaptManifest.exists()) {
//                    new PlaceholderEncoder().visit(xmlDocument);
                    save(xmlDocument, aaptManifest);
                    println "ZSR::" + xmlDocument.prettyPrint()
                    mLogger.info("Merged aapt safe manifest saved to " + aaptManifest);
                }
                break;
            case MergingReport.Result.ERROR:
                mergingReport.log(mLogger);
                throw new RuntimeException(mergingReport.getReportString());
            default:
                throw new RuntimeException("Unhandled result type : " + mergingReport.getResult());
        }
    } catch (RuntimeException e) {
        // Unacceptable error
        e.printStackTrace()
        throw new RuntimeException(e);
    }
}

private void save(XmlDocument xmlDocument, File out) {
    try {
        Files.write(xmlDocument.prettyPrint(), out, Charsets.UTF_8);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

class MiLogger implements ILogger {

    @Override
    void error(
            @com.android.annotations.Nullable Throwable t,
            @com.android.annotations.Nullable String msgFormat, Object... args) {
        System.err.println(String.format("========== ERROR : " + msgFormat, args))
        if (t) t.printStackTrace(System.err)
    }

    @Override
    void warning(@NonNull String msgFormat, Object... args) {
        System.err.println(String.format("========== WARNING : " + msgFormat, args))
    }

    @Override
    void info(@NonNull String msgFormat, Object... args) {
        System.out.println(String.format("========== INFO : " + msgFormat, args))
    }

    @Override
    void verbose(@NonNull String msgFormat, Object... args) {
        // System.out.println(String.format("========== DEBUG : " + msgFormat, args))
    }
}


//替换文件的字符串
task deleteManifestMinSdkVersionString {
    doLast {
        def strBuffer = fileReader(projectDir.absolutePath + '/src/main/AndroidManifest.xml')
        fileWrite(projectDir.absolutePath + '/src/main/AndroidManifest.xml', strBuffer)
    }
}
task recoverAuthoritiesString {
    doLast {
        def strBuffer = recoverAuthorities(projectDir.absolutePath + '/src/main/AndroidManifest.xml')
        fileWrite(projectDir.absolutePath + '/src/main/AndroidManifest.xml', strBuffer)
    }
}

//读取文件并替换字符串
def fileReader(path, oldStr, newStr) {
    def readerString = "";
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.find(oldStr)) {
                it = it.replace(oldStr, newStr)
            }
            readerString <<= it
            readerString << '\n'
        }
        return readerString
    }
}

//读取文件并删除<use-sdk> 行字符串
def fileReader(path) {
    def readerString = "";
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.find("minSdkVersion")
                    || it.find("uses-sdk")
                    || it.find("overrideLibrary")) {
                it = ""
            }

            readerString <<= it
            readerString << '\n'
        }
        return readerString
    }
}

//读取文件并删除<use-sdk> 行字符串
def recoverAuthorities(path) {
    def readerString = "";
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if(it.find('authorities="com.anythink.reactnative')) {
                it = it.replace('authorities="com.anythink.reactnative', 'authorities="${applicationId}')
            }
            if(it.find('name="com.anythink.reactnative')) {
                it = it.replace('name="com.anythink.reactnative.fileprovider', 'name="${applicationId}.fileprovider')
            }
            readerString <<= it
            readerString << '\n'
        }
        return readerString
    }
}



//写文件
def fileWrite(path, stringBuffer) {
    new File(path).withWriter('UTF-8') {
        within ->
            within.append(stringBuffer)
    }
}


//删除minSdkVersion任务执行前 需要 依赖 合并所有network的manifest
deleteManifestMinSdkVersionString.dependsOn mergeAllNetworkManifest
recoverAuthoritiesString.dependsOn deleteManifestMinSdkVersionString

//preBuild任务执行前 需要 依赖  recoverAuthoritiesString
preBuild.dependsOn recoverAuthoritiesString